# Excel Trading Workflow - Project Rules for Claude Code

## üîç FIRST ACTIONS ON NEW SESSION

When starting a new session, **IMMEDIATELY READ THESE FILES** (in order):

1. **SESSION_2_SUMMARY.md** - Quick project status and recent changes
2. **DEVELOPMENT_LOG.md** - Technical context, known issues, debugging patterns
3. **CHANGELOG.md** - Version history and what changed when
4. **README.md** - Current project overview

**DO NOT** start coding or answering questions until you've read these files!

---

## üìÅ Project Structure Overview

### VBA Modules (11 files) - Core Trading System
- `VBA/TF_Utils.bas` - Helper functions (sheet/table management)
- `VBA/TF_Data.bas` - Data structure, heat calculations, cooldowns
- `VBA/TF_UI.bas` - Trading logic (evaluate, size, save decisions)
- `VBA/TF_Presets.bas` - FINVIZ integration with smart import
- `VBA/TF_Python_Bridge.bas` - Python in Excel integration
- `VBA/TF_UI_Builder.bas` - Automated UI generation + checkbox creation
- `VBA/Setup.bas` - One-click initialization + user guide launcher
- `VBA/ThisWorkbook.cls` - Auto-setup on workbook open
- `VBA/Sheet_TradeEntry.cls` - TradeEntry sheet events

### Python Modules (3 files) - Optional Acceleration
- `Python/finviz_scraper.py` - Active web scraping (NOT permalinks!)
- `Python/heat_calculator.py` - Fast pandas calculations
- `Python/requirements.txt` - Dependencies

### Documentation (9 files)
- `USER_GUIDE.md` ‚≠ê - 15k word beginner guide (PRIMARY USER REFERENCE)
- `DEVELOPMENT_LOG.md` ‚≠ê - Technical context (PRIMARY AI REFERENCE)
- `CHANGELOG.md` - Version history
- `SESSION_2_SUMMARY.md` - Latest session recap
- `README.md` - Project overview
- `README_UPDATED.md` - Feature summary
- `UPDATED_QUICK_START.md` - Quick reference
- `FINAL_SUMMARY.md` - Project achievements
- `IMPLEMENTATION_STATUS.md` - Technical architecture

---

## üö® CRITICAL RULES - NEVER VIOLATE

### 1. NO UNICODE IN VBA CODE
**NEVER use Unicode characters in VBA string literals!**

‚ùå **BAD:**
```vba
.Range("A1").Value = "‚úì Complete"
.Range("A2").Value = "‚Üí Next step"
MsgBox "‚úì Success"
```

‚úÖ **GOOD:**
```vba
.Range("A1").Value = "[OK] Complete"
.Range("A2").Value = "-> Next step"
MsgBox "[OK] Success"
```

**Why:** VBA doesn't support UTF-8. Unicode displays as garbled text (√¢Àú, √¢‚Ä†', etc.)

**Always use ASCII alternatives:**
- `‚úì` ‚Üí `[OK]`
- `‚úó` ‚Üí `[X]`
- `‚Üí` ‚Üí `->`
- `‚òê` ‚Üí `[ ]`
- `‚Ä¢` ‚Üí `-`
- `‚äò` ‚Üí `[SKIP]`

### 2. PYTHON IN EXCEL IS MODERN (2023+)
**Always use modern Python in Excel syntax!**

‚ùå **BAD (Excel 2019 style):**
```vba
testCell.Formula = "=PY(""1+1"")"  ' Nested quotes, old syntax
```

‚úÖ **GOOD (Excel 2023+ style):**
```vba
testCell.Formula2 = "=PY(1+1)"  ' No inner quotes, Formula2 property
```

**Rules:**
- Use `.Formula2` property (NOT `.Formula`)
- No nested double quotes: `=PY(code)` not `=PY("code")`
- Check for error on formula setting, not value result
- Python in Excel returns Python objects, not direct values

### 3. ALWAYS DELETE SHAPES BEFORE UI REBUILD
**Excel shapes persist through .Cells.Clear!**

‚úÖ **REQUIRED PATTERN:**
```vba
Sub BuildTradeEntryUI()
    Dim ws As Worksheet
    Dim shp As Shape

    Set ws = Worksheets("TradeEntry")

    ' DELETE SHAPES FIRST (buttons, checkboxes, etc.)
    On Error Resume Next
    For Each shp In ws.Shapes
        shp.Delete
    Next shp
    On Error GoTo 0

    ' THEN clear cells
    ws.Cells.Clear
    ws.Cells.ClearFormats
    ws.Cells.ClearComments

    ' Now rebuild UI...
End Sub
```

**Why:** Running UI builder multiple times creates duplicate buttons/controls.

### 4. CHECKBOXES ARE UNRELIABLE IN COM
**Checkbox auto-creation works ~70% of the time.**

**Pattern:**
1. Attempt auto-creation in `CreateCheckboxes()`
2. Provide fallback instructions in Setup sheet
3. Show success message with "If checkboxes missing..." note
4. NEVER promise 100% automated checkbox creation

**User expectations:**
- Best case: Checkboxes appear automatically ‚úÖ
- Fallback: User adds manually (2 minutes) ‚úì
- Both are acceptable outcomes

### 5. ERROR HANDLING MUST BE GRANULAR
**DON'T use large `On Error Resume Next` blocks that swallow errors!**

‚ùå **BAD:**
```vba
On Error Resume Next
' 50 lines of code
On Error GoTo 0
```

‚úÖ **GOOD:**
```vba
On Error Resume Next
.Range("B5").Validation.Add Type:=xlValidateList, Formula1:="=tblPresets[Name]"
If Err.Number <> 0 Then
    Debug.Print "Error creating dropdown: " & Err.Description
    Err.Clear
End If
On Error GoTo 0
```

**Benefits:**
- Easier debugging
- User gets helpful error messages
- Failures don't cascade silently

---

## üë§ USER CONTEXT

### Who the User Is
- **Background:** Options trader (NOT a quant, NOT a programmer)
- **Needs:** Plain English explanations, step-by-step instructions
- **Skills:** Excel basics, trading knowledge
- **Doesn't Know:** VBA, Python, ATR formulas, position sizing math

### Communication Style
- ‚úÖ **Be explicit:** "Click cell B5, then select TF_BREAKOUT_LONG"
- ‚úÖ **Use examples:** "AAPL at $180.50, ATR = $1.50, K = 2"
- ‚úÖ **Explain why:** "This prevents FOMO trading"
- ‚úÖ **Show the math:** "R = $10,000 √ó 0.75% = $75"
- ‚ùå **Don't use jargon** without explaining it
- ‚ùå **Don't assume knowledge** of quant concepts

### What User Values
- **Automation** - Less manual work
- **Documentation** - Detailed guides
- **Reliability** - Fallbacks when automation fails
- **Clarity** - Know what each thing does

---

## üêõ COMMON ISSUES & SOLUTIONS

### Issue: "Dropdown missing in cell B5"
**Root Cause:** Data validation failed silently

**Debug:**
1. Check if tables exist (Presets sheet ‚Üí tblPresets)
2. Check if BindControls() was called
3. Look for Debug.Print warnings in Immediate Window
4. Manual fix: Data ‚Üí Data Validation ‚Üí List ‚Üí `=tblPresets[Name]`

### Issue: "Python says NOT AVAILABLE"
**Root Cause:** Excel version too old or Python not enabled

**Debug:**
1. Ask user to test: `=PY(1+1)` in a cell
2. If `#NAME?` error ‚Üí Python in Excel doesn't exist
3. Check Excel version: File ‚Üí Account ‚Üí About Excel (need 2023+ Insider)
4. Fallback: Manual import works for everyone

### Issue: "Garbled characters in cells"
**Root Cause:** Unicode in VBA strings

**Fix:**
1. Search VBA: `grep -P "[^\x00-\x7F]" VBA/*.bas`
2. Replace with ASCII (see Rule #1)
3. Git diff should show only ASCII

### Issue: "Duplicate buttons"
**Root Cause:** UI builder ran multiple times, shapes not deleted

**Fix:**
1. Add shape deletion loop (see Rule #3)
2. Or manually: Click each button, press Delete

### Issue: "Checkboxes didn't auto-create"
**Root Cause:** COM automation unreliable

**Fix:**
1. This is expected behavior (~30% failure rate)
2. User follows manual instructions on Setup sheet
3. Takes 2 minutes, same as v1.0.0

---

## üîÑ DEVELOPMENT WORKFLOW

### When User Reports a Bug
1. ‚úÖ Check DEVELOPMENT_LOG.md ‚Üí "Known Issues"
2. ‚úÖ Check CHANGELOG.md ‚Üí Was it fixed recently?
3. ‚úÖ Ask for specific error message / screenshot
4. ‚úÖ Guide through troubleshooting steps
5. ‚úÖ Update DEVELOPMENT_LOG.md with new findings
6. ‚úÖ Update CHANGELOG.md if fix is implemented

### When Adding New Features
1. ‚úÖ Update CHANGELOG.md (version, description)
2. ‚úÖ Update DEVELOPMENT_LOG.md (technical notes)
3. ‚úÖ Update USER_GUIDE.md (if user-facing)
4. ‚úÖ Update Setup sheet (if affects setup)
5. ‚úÖ Add error handling and fallbacks
6. ‚úÖ Add Debug.Print for troubleshooting
7. ‚úÖ Test on actual scenario (or guide user to test)

### When Modifying VBA Code
1. ‚úÖ Read the module first (understand context)
2. ‚úÖ Check for Unicode strings (replace with ASCII)
3. ‚úÖ Add granular error handling
4. ‚úÖ Add Debug.Print statements
5. ‚úÖ Preserve existing functionality
6. ‚úÖ Test syntax (or note it needs testing)

### When Writing Documentation
1. ‚úÖ Use plain English (user is not a quant)
2. ‚úÖ Provide real examples (AAPL at $180.50)
3. ‚úÖ Explain the "why" (trading psychology)
4. ‚úÖ Include troubleshooting section
5. ‚úÖ Add step-by-step instructions

---

## üìä TESTING CHECKLIST

Before claiming "it's fixed" or "it works", verify:

- [ ] BUILD.bat creates workbook successfully
- [ ] First open triggers auto-setup
- [ ] USER_GUIDE.md opens automatically
- [ ] Checkboxes appear (or fallback instructions work)
- [ ] All 4 dropdowns exist (B5, B6, B7, B8)
- [ ] No Unicode gibberish anywhere
- [ ] No duplicate buttons after rebuild
- [ ] Python detection works (both available/unavailable states)
- [ ] Import Candidates button works
- [ ] Evaluate button shows GREEN/YELLOW/RED
- [ ] Save Decision enforces 5 hard gates

**If you can't test (WSL/Linux environment):**
- Guide user through testing steps
- Ask for specific feedback
- Document assumptions in code comments

---

## üéØ PROJECT STATUS (v2.0.0)

**Current State:** ‚úÖ Production Ready

**What Works:**
- Full trading system (6-item checklist, GO/NO-GO)
- FINVIZ scraping (manual + Python auto-scraping)
- Position sizing (3 methods: Stock, Opt-DeltaATR, Opt-MaxLoss)
- Heat management (portfolio + bucket caps + cooldowns)
- Automated setup on first open
- USER_GUIDE.md auto-opens
- Checkbox auto-creation (with manual fallback)

**Known Limitations:**
- Checkboxes: COM automation ~70% reliable (fallback exists)
- Python: Requires Microsoft 365 Insider (optional feature)
- FINVIZ: Rate limited to 1 page/second (by design)
- Platform: Windows Excel only (VBA limitation)

**Next Session Focus:**
- User testing and feedback
- Refinements based on real-world use
- Additional features (if requested)

---

## üìù QUICK REFERENCE

### Key Named Ranges (Summary Sheet)
- `Equity_E` - Account size ($10,000)
- `RiskPct_r` - Risk per trade (0.75%)
- `StopMultiple_K` - ATR multiple for stop (2)
- `HeatCap_H_pct` - Portfolio heat cap (4%)
- `BucketHeatCap_pct` - Bucket heat cap (1.5%)

### Key Tables
- `tblPresets` - FINVIZ query strings
- `tblBuckets` - Correlation groups
- `tblCandidates` - Daily imported tickers
- `tblDecisions` - Trade log
- `tblPositions` - Open positions

### Key Functions
- `EnsureStructure()` - Creates all sheets/tables
- `BuildTradeEntryUI()` - Creates UI + checkboxes
- `BindControls()` - Sets up dropdowns
- `EvaluateChecklist()` - GO/NO-GO decision
- `RecalcSizing()` - Position size calculation
- `SaveDecision()` - Trade logging (5 hard gates)

---

## üéì LEARNING RESOURCES

**For Understanding the System:**
- USER_GUIDE.md - Start here (explains everything)
- DEVELOPMENT_LOG.md - Technical deep dive
- IMPLEMENTATION_STATUS.md - Architecture

**For Trading Concepts:**
- ATR (Average True Range) - Volatility measure in dollars
- K (Stop Multiple) - How many ATRs away is the stop
- R (Dollar Risk) - Equity √ó RiskPct (e.g., $10k √ó 0.75% = $75)
- Heat - Total dollar risk across positions
- Bucket - Correlation group (Tech, Healthcare, etc.)
- Cooldown - Auto-pause after 2 stopouts in 20 days

**For VBA Patterns:**
- DEVELOPMENT_LOG.md ‚Üí "Development Patterns" section
- Look at existing code for examples
- Check CHANGELOG.md for what was fixed and why

---

## ü§ù COLLABORATION PRINCIPLES

### With User
- **Listen first** - User knows trading, may not know programming
- **Ask clarifying questions** - Better to confirm than assume
- **Provide options** - "Option A: automated (complex), Option B: manual (simple)"
- **Celebrate wins** - "Great! That worked perfectly"
- **Own mistakes** - "I missed that Unicode character, let me fix it"

### With Next AI Assistant
- **Document everything** - Update DEVELOPMENT_LOG.md
- **Leave breadcrumbs** - Debug.Print statements, code comments
- **Explain decisions** - Why you chose this approach
- **Note uncertainties** - "This might fail if X, fallback is Y"
- **Update changelogs** - Track what changed and why

---

## üöÄ SESSION START TEMPLATE

When user starts a new session, follow this template:

```markdown
Hi! I'm starting a new session on the Excel Trading Workflow project.

Let me read the project context files first:
[Read SESSION_2_SUMMARY.md]
[Read DEVELOPMENT_LOG.md]
[Read CHANGELOG.md]

Got it! I'm up to speed on:
- Current version: v2.0.0
- Recent changes: [summarize]
- Known issues: [list any]
- Project status: Production ready ‚úÖ

How can I help you today?
```

**NEVER skip reading these files!** They contain critical context.

---

## üìå REMEMBER

1. **User is NOT a programmer** - Explain everything in plain English
2. **User is an options trader** - Knows trading, needs help with tech
3. **Automation > Manual** - User prefers less work, even if complex
4. **Documentation matters** - User reads guides, not code
5. **Fallbacks are acceptable** - 100% automation isn't always possible
6. **Unicode = Bug** - Never use in VBA strings
7. **Python is modern** - Use Formula2 and new syntax
8. **Read context files first** - Don't code blind
9. **Update docs as you go** - Future you (and next AI) will thank you
10. **Test before claiming success** - Or guide user through testing

---

**Project:** Excel Trading Workflow
**Current Version:** v2.0.0
**Status:** ‚úÖ Production Ready
**Last Updated:** 2025-01-27

**For detailed technical context, see DEVELOPMENT_LOG.md**
**For user-facing documentation, see USER_GUIDE.md**
**For version history, see CHANGELOG.md**
